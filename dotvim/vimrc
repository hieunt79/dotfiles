"""-----------------------------------------------------------
"""        Plugins
"""-----------------------------------------------------------
"""
silent! source ~/.vim/autoload/plug.vim
silent! source ~/.vim/plugins.vim
silent! source ~/.vim/syntax/*

"""-----------------------------------------------------------
"""        Setting attributes
"""-----------------------------------------------------------
"""

" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible

set encoding=utf-8
set fileencoding=utf-8

syntax on                  " Enable syntax highlighting.
colorscheme default

set showmode                " Show current mode in command-line.
set showcmd                 " Show already typed keys when more are expected.

set splitbelow              " Open new windows below the current window.
set splitright              " Open new windows right of the current window.

set ruler                   " show cursor position

set magic                   " For regular expressions turn magic on

set wrapscan                " Searches wrap around end-of-file.

set report=0                " Always report changed lines.

"set mouse=a                " To enable mouse support

set mouse=                  " To disable mouse support

" set highlight search
set noswapfile " disable the swapfile
set hlsearch " highlight all results
set ignorecase " ignore case in search
set incsearch                   " show search results as you type
set showmatch                   " show matching brackets/parenthesis

" Persistent undo
" Don't forget mkdir folder $HOME/.local/share/nvim/undo
set undofile
set undodir=$HOME/.local/share/vim/undo
set undolevels=1000
set undoreload=10000

set scrolloff=9
"set scrolloff=9999

" Learn from https://www.youtube.com/watch?v=XA2WjJbmmoM
set path+=**
set wildmenu

" FILE BROWSING:
"
" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
"let g:netrw_list_hide.=

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"""-----------------------------------------------------------
"""        Status line
"""-----------------------------------------------------------
"""

" Hide by default
set laststatus=1

" Format the status line
"set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:%l/%L\ \ Column:%c\ \ Filetype:%{&filetype}\ \ %m%r%w\ %P
set statusline=\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:%l/%L\ \ Column:%c\ \ Filetype:%{&filetype}\ \ %m%r%w\ %P

"""-----------------------------------------------------------
"""        keymap custom
"""-----------------------------------------------------------
"""

let mapleader = ","
map ' ' <leader>

vnoremap < <gv
vnoremap > >gv

inoremap jj <ESC>
inoremap kk <C-O>

noremap <Leader>w :w<cr>
noremap <Leader>q :q!<CR>
noremap <Leader>x :x<CR>

"" set adaptive toggle number
set nonumber
set norelativenumber

function! ToggleNumberMode()
  if &number
    set nonumber relativenumber
  elseif &relativenumber
    set norelativenumber number
  else
    set number
  endif
endfunction

nnoremap <leader>n :call ToggleNumberMode()<CR>

" set visual
function! ToggleVisualMode()
    if &relativenumber == 0 && &number == 0
        set relativenumber
        set number
        set laststatus=2
        set cursorline
        " smart cursorline
        autocmd InsertLeave,WinEnter * set cursorline
        autocmd InsertEnter,WinLeave * set nocursorline

    else
        set norelativenumber
        set nonumber
        set laststatus=1
        set nocursorline
        autocmd! InsertLeave,WinEnter * set cursorline
        autocmd! InsertEnter,WinLeave * set nocursorline
    endif
endfunction

nnoremap <leader>v :call ToggleVisualMode()<CR>

" find - super effective command
" Usage: if path and wildmenu is set, :find <file_name> will open the file for
" u, you can also add * to search query like :find ipt*
noremap <leader>f :tabnew<CR>:edit .<CR>:find 

" tabnew
noremap <leader>tn :tabnew<CR>:edit .<CR>

" set wrap on the fly
set wrap    " set wrap on the fly
nnoremap <expr> <leader>s &wrap =~ '1' ? ':set nowrap<cr>' : ':set wrap<cr>'

" Reload config
noremap <leader>rl :so ~/.vimrc<CR>

" Make Ctrl-w undoable
inoremap <C-w> <C-g>u<C-w>

" replace tab by ',' character (useful for pasting from excel to text, then save in csv format)
noremap <leader>tc :%s/\t/,/g

"
noremap <leader>E :vs.<cr>
noremap <leader>e :Explore<cr>

" Clear current highlight search
noremap <leader>h :noh<cr>

" In byobu, C-A is used for window management, so let change to <leader>a;
" Example for using C-A in vim:
" - https://www.reddit.com/r/vim/comments/av24za/til_about_gca/
noremap <leader>a g<C-A>

" Retab
nnoremap <leader>rt :retab<cr>

" You know <shift>j that concaticate multiple line with :space:,
" below is opposite of <shift>j - make a line with numbers of :space: become multiple line
nnoremap Q gqap
vnoremap Q gq

set hidden
nnoremap <Leader>bb :buffers<CR>:buffer<Space>
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>

"""-----------------------------------------------------------
"""        indentation and tab relate
"""-----------------------------------------------------------
"""

" There're times that the below option makes me hard to control the indentation.
" E.g: If filetype is c, it autoloads the cindent, and not obey my default
" indent.
filetype plugin indent on  " Load plugins according to detected filetype.
"filetype indent on  " Load indent according to detected filetype.

" display indentation guides
" Ref: https://stackoverflow.com/a/2159997
set list listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×

" Disable paste for using supertab plugin
function! TogglePasteMode()
  if &paste
    set nopaste
  else
    set paste
    set expandtab               " Use spaces instead of tabs.
  endif
endfunction
nnoremap <leader>p :call TogglePasteMode()<CR>

set paste
set tabstop=4
set softtabstop=4          " Tab key indents by 4 spaces.
set shiftwidth=4          " >> indents by 4 spaces.
set shiftround              " >> indents to next multiple of 'shiftwidth'.
set expandtab               " Use spaces instead of tabs.

set smarttab                " Be smart when using tabs ;)
set autoindent              " Auto indent with tab
set smartindent
set copyindent              " Indent according to previous line.

set expandtab               " Use spaces instead of tabs.
"autocmd BufRead,BufNewFile *.c,*.h setlocal cindent
autocmd FileType c setlocal autoindent | setlocal noexpandtab
autocmd FileType markdown setlocal tabstop=2 | setlocal shiftwidth=2 | setlocal softtabstop=2


"""-----------------------------------------------------------
"""        other config
"""-----------------------------------------------------------
"""

" if files doesn't exist, gf creates new file at path under cursor
" As suggest at
" https://www.reddit.com/r/vim/comments/3cek64/comment/csvexjp/
" But, be careful, if the path is mapped to smt in docker, or the path belongs
" to other server, you may accidentally create wrong file (if you save the
" buffer)
map gf :e <cfile><CR>

augroup visual_commenting
    autocmd!
    autocmd FileType java,rust        let b:comment_symbol = '//'
    autocmd FileType c,cpp            let b:comment_symbol = '//'
    autocmd FileType yml,yaml         let b:comment_symbol = '#'
    autocmd FileType vim              let b:comment_symbol = '"'
    autocmd FileType sh,python        let b:comment_symbol = '#'
    autocmd FileType tex              let b:comment_symbol = '%'
    autocmd BufEnter * silent! vnoremap <silent> <C-_> :<C-u>keepp '<,'>s@^@\=b:comment_symbol<CR>
    autocmd BufEnter * silent! exec 'vnoremap <silent> <C-?> :<C-u>keepp ''<,''>s@^' . b:comment_symbol . '@<CR>'
augroup END

" To copy to clipboard of host, first, vim must compile with +xterm_clipboard,
" then set below config, or easier install vim-gtk3.
" set clipboard=unnamedplus
noremap <leader>y :%y+<cr>
"noremap <leader>y "+y

" Yank all lines in file to "
noremap <leader>Y mjggVGy`j
" Replace current data in file with " registry
noremap <leader>P ggVGp

" clear trailing space in every line
noremap <leader>ts :%s/\s\+$//g

" WIP: Ctrl-^ is for fast switching file maybe =))
"noremap <leader><leader> <C-^>

" To align '=' character in block
" First, visual a block with 'v'(remember to visual one more line break, it's bug of column command),
" then <leader>T, after that 'gv' to reselect visual block.
" Second, remove added space next to '=' with <leader>=
vnoremap <leader>T :!column -t <cr>
vnoremap <leader>= :s/ = /=/<cr>

noremap <leader>FT :set filetype=

" Wrapped lines goes down/up to next row, rather than next line in file.
"nnoremap j gj
"nnoremap k gk

" showtabline=1 to show tabline only when more than one tab is present
" showtabline=2 to always show tabline
set showtabline=2

set tabline=%!MyTabLine()  " custom tab pages line
function! MyTabLine() " acclamation to avoid conflict
    let s = '' " complete tabline goes here
    " loop through each tab page
    for t in range(tabpagenr('$'))
        " set highlight
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " set the tab page number (for mouse clicks)
        let s .= '%' . (t + 1) . 'T'
        let s .= ' '
        " set page number string
        let s .= t + 1 . ' '
        " get buffer names and statuses
        let n = ''      " temp string for buffer names while we loop and check buftype
        let m = 0       " &modified counter
        let bc = len(tabpagebuflist(t + 1))     " counter to avoid last ' '
        " loop through each buffer in a tab
        for b in tabpagebuflist(t + 1)
            " buffer types: quickfix gets a [Q], help gets [H]{base fname}
            " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
            if getbufvar( b, "&buftype"  ) == 'help'
                let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//'  )
            elseif getbufvar( b, "&buftype"  ) == 'quickfix'
                let n .= '[Q]'
            else
                let n .= pathshorten(bufname(b))
            endif
            " check and ++ tab's &modified count
            if getbufvar( b, "&modified"  )
                let m += 1
            endif
            " no final ' ' added...formatting looks better done later
            if bc > 1
                let n .= ' '
            endif
            let bc -= 1
        endfor
        " add modified label [n+] where n pages in tab are modified
        if m > 0
            let s .= '[' . m . '+]'
        endif
        " select the highlighting for the buffer names
        " my default highlighting only underlines the active tab
        " buffer names.
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " add buffer names
        if n == ''
            let s.= '[New]'
        else
            let s .= n
        endif
        " switch to no underlining and add final space to buffer list
        let s .= ' '
    endfor
    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'
    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let s .= '%=%#TabLineFill#%999Xclose'
    endif
    return s
endfunction"

"""-----------------------------------------------------------
"""        for plugins config
"""-----------------------------------------------------------
"""

if exists('g:plugs')
    nnoremap <leader>tr :NERDTreeToggle<cr>
    nnoremap <leader>tf :NERDTreeFocus<cr>
    "noremap <leader>tr :NERDTree<cr>

    " :find
    noremap <leader>f :tabnew<CR>:NERDTreeToggle<CR><C-W><C-W>:find 
    " tabnew
    noremap <leader>tn :tabnew<CR>:NERDTree<CR>

    let g:lightline = {'colorscheme' : 'ayu'}
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

    set termguicolors
    "colorscheme horizon

    "colorscheme ayu
    ""let ayucolor="light"  " for light version of ayu theme
    "let ayucolor="mirage" " for mirage version of ayu theme
    ""let ayucolor="dark"   " for dark version of ayu theme

    colorscheme gruvbox
    "set background=dark   " for dark ver of gruvbox
    set background=light   " for light ver of gruvbox

    nnoremap <leader>gb :Git blame<cr>
    nnoremap <leader>gs :Git <cr>
    nnoremap <leader>gc :Git commit -v<cr>
    nnoremap <leader>ga :Git add -p<cr>
    nnoremap <leader>gm :Git commit --amend<cr>
    nnoremap <leader>gp :Git push<cr>
    nnoremap <leader>gd :Git diff<cr>
    nnoremap <leader>gg :GitGutter<cr>

    set nopaste
    set expandtab

    set relativenumber
    set number

    set laststatus=2
    set cursorline

    "inoremap " ""<left>
    "inoremap ' ''<left>
    "inoremap ( ()<left>
    "inoremap [ []<left>
    "inoremap { {}<left>
    "inoremap {<CR> {<CR>}<ESC>O
    "inoremap {;<CR> {<CR>};<ESC>O

    " Start NERDTree. If a file is specified, move the cursor to its window.
    "autocmd StdinReadPre * let s:std_in=1
    "autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif
endif

