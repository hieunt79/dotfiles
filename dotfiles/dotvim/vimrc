"""-----------------------------------------------------------
"""        Plugins
"""-----------------------------------------------------------
"""
silent! source ~/.vim/autoload/plug.vim
silent! source ~/.vim/plugins.vim

"""-----------------------------------------------------------
"""        Setting attributes
"""-----------------------------------------------------------
"""

" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible

set encoding=utf-8
set fileencoding=utf-8

filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.
colorscheme default

" display indentation guides
" Ref: https://stackoverflow.com/a/2159997
set list listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×

set showmode                " Show current mode in command-line.
set showcmd                 " Show already typed keys when more are expected.

set splitbelow              " Open new windows below the current window.
set splitright              " Open new windows right of the current window.

" Hide by default
"set cursorline              " Find the current line quickly.

" smart set cursorline
autocmd InsertLeave,WinEnter * set cursorline
autocmd InsertEnter,WinLeave * set nocursorline

set ruler                   " show cursor position

set magic                   " For regular expressions turn magic on

set wrapscan                " Searches wrap around end-of-file.

set report=0                " Always report changed lines.

"set mouse=a                " To enable mouse support

set mouse=                  " To disable mouse support

" set highlight search
set noswapfile " disable the swapfile
set hlsearch " highlight all results
set ignorecase " ignore case in search
set incsearch " show search results as you type

" Persistent undo
" Don't forget mkdir folder $HOME/.local/share/nvim/undo
set undofile
set undodir=$HOME/.local/share/vim/undo
set undolevels=1000
set undoreload=10000

set scrolloff=9
"set scrolloff=9999


"""-----------------------------------------------------------
"""        Status line
"""-----------------------------------------------------------
"""

" Hide by default
set laststatus=1

" Format the status line
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:%l/%L\ \ Column:%c\ \ Filetype:%{&filetype}\ \ %m%r%w\ %P

"""-----------------------------------------------------------
"""        indentation and tab relate
"""-----------------------------------------------------------
"""

vnoremap < <gv
vnoremap > >gv

set autoindent              " Indent according to previous line.
set smarttab                " Be smart when using tabs ;)
set expandtab               " Use spaces instead of tabs.
set tabstop=4
set softtabstop =4          " Tab key indents by 4 spaces.
set shiftwidth  =4          " >> indents by 4 spaces.
set shiftround              " >> indents to next multiple of 'shiftwidth'.

"""-----------------------------------------------------------
"""        keymap custom
"""-----------------------------------------------------------
"""

"let mapleader = ";"
"map ' ' <leader>
let mapleader = ","
"map ';' <leader>
map ' ' <leader>

inoremap qq <ESC>

noremap <Leader>w :w<cr>
noremap <Leader>q :q<CR>
noremap <Leader>x :x<CR>

" Disable paste for using supertab plugin
set paste
nnoremap <expr> <leader>P &paste =~ '1' ? ':set nopaste<cr>' : ':set paste<cr>'

"" set adaptive toggle number
set nonumber
"nnoremap <expr> <leader>n &number =~# '1' ? ':set nonumber<cr>' : ':set number<cr>'
set norelativenumber
"nnoremap <expr> <leader>N &relativenumber =~ '1' ? ':set norelativenumber<cr>' : ':set relativenumber<cr>'

" set visual
nnoremap <expr> <leader>v &relativenumber =~ '0' && &number =~ '0' ? ':set relativenumber<cr>:set number<cr>:set laststatus=2<cr>:set cursorline<cr>' : ':set norelativenumber<cr>:set nonumber<cr>:set laststatus=1<cr>:set nocursorline<cr>'

" tabnew
noremap <leader>tn :tabnew 

set showmatch                   " show matching brackets/parenthesis

" set wrap on the fly
set wrap    " set wrap on the fly
nnoremap <expr> <leader>s &wrap =~ '1' ? ':set nowrap<cr>' : ':set wrap<cr>'

" Reload config
noremap <leader>r :so ~/.vimrc<CR>

" Make Ctrl-w undoable
inoremap <C-w> <C-g>u<C-w>

" replace tab by ',' character (useful for pasting from excel to text, then save in csv format)
noremap <leader>tc :%s/\t/,/g

"
noremap <leader>y :%y+<cr>

"
noremap <leader>E :vs.<cr>
noremap <leader>e :Explore<cr>

" Clear current highlight search
noremap <leader>h :noh<cr>

" In byobu, C-A is used for window management, so let change to <leader>a;
" Example for using C-A in vim:
" - https://www.reddit.com/r/vim/comments/av24za/til_about_gca/
noremap <leader>a g<C-A>


" You know <shift>j that concaticate multiple line with :space:,
" below is opposite of <shift>j - make a line with numbers of :space: become multiple line
nnoremap Q gqap
vnoremap Q gq

set hidden
nnoremap <Leader>bb :buffers<CR>:buffer<Space>
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>

"""-----------------------------------------------------------
"""        other config
"""-----------------------------------------------------------
"""

" To copy to clipboard of host, first, vim must compile with +xterm_clipboard,
" then set below config, or easier install vim-gtk3.
"set clipboard=unnamedplus

" or you can direct use "+p
noremap <leader>Y "+y
noremap <leader>p "+p

" clear trailing space in every line
noremap <leader>c :%s/\s\+$//g

" WIP: Ctrl-^ is for fast switching file maybe =))
"noremap <leader><leader> <C-^>

" To align '=' character in block
" First, visual a block with 'v'(remember to visual one more line break, it's bug of column command),
" then <leader>T, after that 'gv' to reselect visual block.
" Second, remove added space next to '=' with <leader>=
vnoremap <leader>T :!column -t <cr>
vnoremap <leader>= :s/ = /=/<cr>

noremap <leader>ft :set filetype=

set expandtab
" Wrapped lines goes down/up to next row, rather than next line in file.
"nnoremap j gj
"nnoremap k gk

function! ToggleNumberMode()
  if &number
    set nonumber relativenumber
  elseif &relativenumber
    set norelativenumber number
  else
    set number
  endif
endfunction

nnoremap <leader>n :call ToggleNumberMode()<CR>

set showtabline=1  " 1 to show tabline only when more than one tab is present
set tabline=%!MyTabLine()  " custom tab pages line
function! MyTabLine() " acclamation to avoid conflict
    let s = '' " complete tabline goes here
    " loop through each tab page
    for t in range(tabpagenr('$'))
        " set highlight
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " set the tab page number (for mouse clicks)
        let s .= '%' . (t + 1) . 'T'
        let s .= ' '
        " set page number string
        let s .= t + 1 . ' '
        " get buffer names and statuses
        let n = ''      " temp string for buffer names while we loop and check buftype
        let m = 0       " &modified counter
        let bc = len(tabpagebuflist(t + 1))     " counter to avoid last ' '
        " loop through each buffer in a tab
        for b in tabpagebuflist(t + 1)
            " buffer types: quickfix gets a [Q], help gets [H]{base fname}
            " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
            if getbufvar( b, "&buftype"  ) == 'help'
                let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//'  )
            elseif getbufvar( b, "&buftype"  ) == 'quickfix'
                let n .= '[Q]'
            else
                let n .= pathshorten(bufname(b))
            endif
            " check and ++ tab's &modified count
            if getbufvar( b, "&modified"  )
                let m += 1
            endif
            " no final ' ' added...formatting looks better done later
            if bc > 1
                let n .= ' '
            endif
            let bc -= 1
        endfor
        " add modified label [n+] where n pages in tab are modified
        if m > 0
            let s .= '[' . m . '+]'
        endif
        " select the highlighting for the buffer names
        " my default highlighting only underlines the active tab
        " buffer names.
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " add buffer names
        if n == ''
            let s.= '[New]'
        else
            let s .= n
        endif
        " switch to no underlining and add final space to buffer list
        let s .= ' '
    endfor
    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'
    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let s .= '%=%#TabLineFill#%999Xclose'
    endif
    return s
endfunction"

if exists('g:plugs')
    nnoremap <leader>tr :NERDTreeToggle<cr>
    nnoremap <leader>tf :NERDTreeFocus<cr>
    "noremap <leader>tr :NERDTree<cr>

    let g:lightline = {'colorscheme' : 'ayu'}
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

    set termguicolors
    "colorscheme horizon

    "colorscheme ayu
    "let ayucolor="light"  " for light version of ayu theme
    "let ayucolor="mirage" " for mirage version of ayu theme
    "let ayucolor="dark"   " for dark version of ayu theme

    colorscheme gruvbox
    set background=dark   " for dark ver of gruvbox
    "set background=light   " for light ver of gruvbox

    nnoremap <leader>gb :Git blame<cr>
    nnoremap <leader>gs :Git <cr>
    nnoremap <leader>gc :Git commit -v<cr>
    nnoremap <leader>ga :Git add -p<cr>
    nnoremap <leader>gm :Git commit --amend<cr>
    nnoremap <leader>gp :Git push<cr>
    nnoremap <leader>gd :Git diff<cr>

    set relativenumber
    set number
    set laststatus=2
    set cursorline

    " Start NERDTree. If a file is specified, move the cursor to its window.
    "autocmd StdinReadPre * let s:std_in=1
    "autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif
endif

