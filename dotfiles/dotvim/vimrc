"""-----------------------------------------------------------
"""        Plugins
"""-----------------------------------------------------------
"""
silent! source ~/.vim/plugins.vim


"""-----------------------------------------------------------
"""        Setting attributes
"""-----------------------------------------------------------
"""

" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible

set encoding=utf-8
set fileencoding=utf-8

filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.
colorscheme default

" display indentation guides
" Ref: https://stackoverflow.com/a/2159997
set list listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×

set showmode                " Show current mode in command-line.
set showcmd                 " Show already typed keys when more are expected.

set splitbelow              " Open new windows below the current window.
set splitright              " Open new windows right of the current window.

" Hide by default
"set cursorline              " Find the current line quickly.

" smart set cursorline
autocmd InsertLeave,WinEnter * set cursorline
autocmd InsertEnter,WinLeave * set nocursorline

set ruler                   " show cursor position

set magic                   " For regular expressions turn magic on

set wrapscan                " Searches wrap around end-of-file.

set report=0                " Always report changed lines.

"set mouse=a                " To enable mouse support

set mouse=                  " To disable mouse support

" set highlight search
set noswapfile " disable the swapfile
set hlsearch " highlight all results
set ignorecase " ignore case in search
set incsearch " show search results as you type

" Persistent undo
" Don't forget mkdir folder $HOME/.local/share/nvim/undo
set undofile
set undodir=$HOME/.local/share/vim/undo
set undolevels=1000
set undoreload=10000

set scrolloff=9
"set scrolloff=9999


"""-----------------------------------------------------------
"""        Status line
"""-----------------------------------------------------------
"""

" Hide by default
set laststatus=1

" Format the status line
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:%l/%L\ \ Column:%c\ \ Filetype:%{&filetype}\ \ %m%r%w\ %P

"""-----------------------------------------------------------
"""        indentation and tab relate
"""-----------------------------------------------------------
"""

vnoremap < <gv
vnoremap > >gv

set autoindent              " Indent according to previous line.
set smarttab                " Be smart when using tabs ;)
set expandtab               " Use spaces instead of tabs.
set tabstop=4
set softtabstop =4          " Tab key indents by 4 spaces.
set shiftwidth  =4          " >> indents by 4 spaces.
set shiftround              " >> indents to next multiple of 'shiftwidth'.

"""-----------------------------------------------------------
"""        keymap custom
"""-----------------------------------------------------------
"""

inoremap qq <ESC>
let mapleader = " "
map ; <leader>
noremap <Leader>w :w<cr>
noremap <Leader>q :q<CR>
noremap <Leader>x :x<CR>

" Disable paste for using supertab plugin
set paste
nnoremap <expr> <leader>P &paste =~ '1' ? ':set nopaste<cr>' : ':set paste<cr>'

"" set adaptive toggle number
set nonumber
"nnoremap <expr> <leader>n &number =~# '1' ? ':set nonumber<cr>' : ':set number<cr>'
set norelativenumber
"nnoremap <expr> <leader>N &relativenumber =~ '1' ? ':set norelativenumber<cr>' : ':set relativenumber<cr>'

" set visual
nnoremap <expr> <leader>v &relativenumber =~ '0' && &number =~ '0' ? ':set relativenumber<cr>:set number<cr>:set laststatus=2<cr>:set cursorline<cr>' : ':set norelativenumber<cr>:set nonumber<cr>:set laststatus=1<cr>:set nocursorline<cr>'

" tabnew
noremap <leader>tn :tabnew 

set showmatch                   " show matching brackets/parenthesis

" set wrap on the fly
set wrap    " set wrap on the fly
nnoremap <expr> <leader>s &wrap =~ '1' ? ':set nowrap<cr>' : ':set wrap<cr>'

" Reload config
noremap <leader>r :so ~/.vimrc<CR>

" Make Ctrl-w undoable
inoremap <C-w> <C-g>u<C-w>

"
noremap <leader>tr :retab<cr>

" replace tab by ',' character (useful for pasting from excel to text, then save in csv format)
noremap <leader>tc :%s/\t/,/g

"
noremap <leader>y :%y+<cr>

"
noremap <leader>E :vs.<cr>
noremap <leader>e :Explore<cr>

" Clear current highlight search
noremap <leader>h :noh<cr>

" In byobu, C-A is used for window management, so let change to <leader>a;
" Example for using C-A in vim:
" - https://www.reddit.com/r/vim/comments/av24za/til_about_gca/
noremap <leader>a g<C-A>


" You know <shift>j that concaticate multiple line with :space:,
" below is opposite of <shift>j - make a line with numbers of :space: become multiple line
nnoremap Q gqap
vnoremap Q gq

set hidden
nnoremap <Leader>bb :buffers<CR>:buffer<Space>
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>

"""-----------------------------------------------------------
"""        other config
"""-----------------------------------------------------------
"""

" To copy to clipboard of host, first, vim must compile with +xterm_clipboard,
" then set below config, or easier install vim-gtk3.
"set clipboard=unnamedplus

" or you can direct use "+p
noremap <leader>Y "+y
noremap <leader>p "+p

" clear trailing space in every line
noremap <leader>c :%s/\s\+$//g

" WIP: Ctrl-^ is for fast switching file maybe =))
noremap <leader><leader> <C-^>

" To align '=' character in block
" First, visual a block with 'v'(remember to visual one more line break, it's bug of column command),
" then <leader>T, after that 'gv' to reselect visual block.
" Second, remove added space next to '=' with <leader>=
vnoremap <leader>T :!column -t <cr>
vnoremap <leader>= :s/ = /=/<cr>

set expandtab
" Wrapped lines goes down/up to next row, rather than next line in file.
"nnoremap j gj
"nnoremap k gk

"set backspace=indent,eol,start  " backspace for dummies
"set linespace=0                 " No extra spaces between rows
"set nu                          " Line numbers on
"set incsearch                   " find as you type search
"set hlsearch                    " highlight search terms
"set winminheight=0              " windows can be 0 line high
"set ignorecase                  " case insensitive search
"set smartcase                   " case sensitive when uc present
"set wildmenu                    " show list instead of just completing
"set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
"set whichwrap=b,s,h,l,<,>,[,]   " backspace and cursor keys wrap to
"set scrolljump=5                " lines to scroll when cursor leaves screen
"set scrolloff=3                 " minimum lines to keep above and below cursor
"set foldenable                  " auto fold code
"set list
"set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace
"
"" Formatting {
"    set nowrap                      " wrap long lines
"    set autoindent                  " indent at the same level of the previous line
"    set shiftwidth=4                " use indents of 4 spaces
"    set expandtab                   " tabs are spaces, not tabs
"    set tabstop=4                   " an indentation every four columns
"    set softtabstop=4               " let backspace delete indent
"    "set matchpairs+=<:>                " match, to be used with %
"    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
"    "set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
"    " Remove trailing whitespaces and ^M chars
"    autocmd FileType c,cpp,java,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
"" }

"" Key (re)Mappings {
"
"    "The default leader is '\', but many people prefer ',' as it's in a standard
"    "location
"    let mapleader = ','
"
"    " Making it so ; works like : for commands. Saves typing and eliminates :W style typos due to lazy holding shift.
"    nnoremap ; :
"
"    " Easier moving in tabs and windows
"    map <C-J> <C-W>j<C-W>_
"    map <C-K> <C-W>k<C-W>_
"    map <C-L> <C-W>l<C-W>_
"    map <C-H> <C-W>h<C-W>_
"
"
"" }

function! ToggleNumberMode()
  if &number
    set nonumber relativenumber
  elseif &relativenumber
    set norelativenumber number
  else
    set number
  endif
endfunction

nnoremap <leader>n :call ToggleNumberMode()<CR>
